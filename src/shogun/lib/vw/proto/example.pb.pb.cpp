// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "example.pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vwcache {

namespace {

const ::google::protobuf::Descriptor* LabelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Example_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Example_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_example_2epb() {
  protobuf_AddDesc_example_2epb();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "example.pb");
  GOOGLE_CHECK(file != NULL);
  LabelData_descriptor_ = file->message_type(0);
  static const int LabelData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelData, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelData, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelData, initial_),
  };
  LabelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelData_descriptor_,
      LabelData::default_instance_,
      LabelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelData));
  Feature_descriptor_ = file->message_type(1);
  static const int Feature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, diff_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, x_),
  };
  Feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Feature));
  Channel_descriptor_ = file->message_type(2);
  static const int Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, first_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, diff_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, x_),
  };
  Channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Channel));
  Example_descriptor_ = file->message_type(3);
  static const int Example_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, channels_),
  };
  Example_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Example_descriptor_,
      Example::default_instance_,
      Example_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Example));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_example_2epb);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelData_descriptor_, &LabelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Channel_descriptor_, &Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Example_descriptor_, &Example::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_example_2epb() {
  delete LabelData::default_instance_;
  delete LabelData_reflection_;
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete Channel::default_instance_;
  delete Channel_reflection_;
  delete Example::default_instance_;
  delete Example_reflection_;
}

void protobuf_AddDesc_example_2epb() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nexample.pb\022\007vwcache\"A\n\tLabelData\022\r\n\005la"
    "bel\030\001 \001(\002\022\021\n\006weight\030\002 \001(\002:\0011\022\022\n\007initial\030"
    "\003 \001(\002:\0010\"(\n\007Feature\022\022\n\ndiff_index\030\001 \001(\005\022"
    "\t\n\001x\030\002 \001(\002\"W\n\007Channel\022\r\n\005index\030\001 \001(\r\022\026\n\013"
    "first_index\030\002 \001(\r:\0010\022\026\n\ndiff_index\030\003 \003(\005"
    "B\002\020\001\022\r\n\001x\030\004 \003(\002B\002\020\001\"Z\n\007Example\022\036\n\002ld\030\001 \001"
    "(\0132\022.vwcache.LabelData\022\013\n\003tag\030\002 \001(\t\022\"\n\010c"
    "hannels\030\003 \003(\0132\020.vwcache.Channel", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "example.pb", &protobuf_RegisterTypes);
  LabelData::default_instance_ = new LabelData();
  Feature::default_instance_ = new Feature();
  Channel::default_instance_ = new Channel();
  Example::default_instance_ = new Example();
  LabelData::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  Channel::default_instance_->InitAsDefaultInstance();
  Example::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_example_2epb);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_example_2epb {
  StaticDescriptorInitializer_example_2epb() {
    protobuf_AddDesc_example_2epb();
  }
} static_descriptor_initializer_example_2epb_;


// ===================================================================

#ifndef _MSC_VER
const int LabelData::kLabelFieldNumber;
const int LabelData::kWeightFieldNumber;
const int LabelData::kInitialFieldNumber;
#endif  // !_MSC_VER

LabelData::LabelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelData::InitAsDefaultInstance() {
}

LabelData::LabelData(const LabelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelData::SharedCtor() {
  _cached_size_ = 0;
  label_ = 0;
  weight_ = 1;
  initial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelData::~LabelData() {
  SharedDtor();
}

void LabelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LabelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelData_descriptor_;
}

const LabelData& LabelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2epb();  return *default_instance_;
}

LabelData* LabelData::default_instance_ = NULL;

LabelData* LabelData::New() const {
  return new LabelData;
}

void LabelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_ = 0;
    weight_ = 1;
    initial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }
      
      // optional float weight = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_initial;
        break;
      }
      
      // optional float initial = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_initial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_)));
          set_has_initial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->label(), output);
  }
  
  // optional float weight = 2 [default = 1];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }
  
  // optional float initial = 3 [default = 0];
  if (has_initial()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->initial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float label = 1;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->label(), target);
  }
  
  // optional float weight = 2 [default = 1];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }
  
  // optional float initial = 3 [default = 0];
  if (has_initial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->initial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float label = 1;
    if (has_label()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 2 [default = 1];
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
    // optional float initial = 3 [default = 0];
    if (has_initial()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelData::MergeFrom(const LabelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_initial()) {
      set_initial(from.initial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelData::CopyFrom(const LabelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelData::IsInitialized() const {
  
  return true;
}

void LabelData::Swap(LabelData* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(weight_, other->weight_);
    std::swap(initial_, other->initial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelData_descriptor_;
  metadata.reflection = LabelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Feature::kDiffIndexFieldNumber;
const int Feature::kXFieldNumber;
#endif  // !_MSC_VER

Feature::Feature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Feature::InitAsDefaultInstance() {
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Feature::SharedCtor() {
  _cached_size_ = 0;
  diff_index_ = 0;
  x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feature::~Feature() {
  SharedDtor();
}

void Feature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2epb();  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New() const {
  return new Feature;
}

void Feature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diff_index_ = 0;
    x_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 diff_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diff_index_)));
          set_has_diff_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 diff_index = 1;
  if (has_diff_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diff_index(), output);
  }
  
  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 diff_index = 1;
  if (has_diff_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diff_index(), target);
  }
  
  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Feature::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 diff_index = 1;
    if (has_diff_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diff_index());
    }
    
    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Feature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Feature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diff_index()) {
      set_diff_index(from.diff_index());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  
  return true;
}

void Feature::Swap(Feature* other) {
  if (other != this) {
    std::swap(diff_index_, other->diff_index_);
    std::swap(x_, other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Channel::kIndexFieldNumber;
const int Channel::kFirstIndexFieldNumber;
const int Channel::kDiffIndexFieldNumber;
const int Channel::kXFieldNumber;
#endif  // !_MSC_VER

Channel::Channel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Channel::InitAsDefaultInstance() {
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Channel::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  first_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channel::~Channel() {
  SharedDtor();
}

void Channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2epb();  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New() const {
  return new Channel;
}

void Channel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    first_index_ = 0u;
  }
  diff_index_.Clear();
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_index;
        break;
      }
      
      // optional uint32 first_index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_index_)));
          set_has_first_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_diff_index;
        break;
      }
      
      // repeated int32 diff_index = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diff_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_diff_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_diff_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x;
        break;
      }
      
      // repeated float x = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional uint32 first_index = 2 [default = 0];
  if (has_first_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_index(), output);
  }
  
  // repeated int32 diff_index = 3 [packed = true];
  if (this->diff_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diff_index_cached_byte_size_);
  }
  for (int i = 0; i < this->diff_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->diff_index(i), output);
  }
  
  // repeated float x = 4 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->x(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional uint32 first_index = 2 [default = 0];
  if (has_first_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_index(), target);
  }
  
  // repeated int32 diff_index = 3 [packed = true];
  if (this->diff_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diff_index_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diff_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->diff_index(i), target);
  }
  
  // repeated float x = 4 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Channel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional uint32 first_index = 2 [default = 0];
    if (has_first_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_index());
    }
    
  }
  // repeated int32 diff_index = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->diff_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->diff_index(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _diff_index_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated float x = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _x_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  diff_index_.MergeFrom(from.diff_index_);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_first_index()) {
      set_first_index(from.first_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  
  return true;
}

void Channel::Swap(Channel* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(first_index_, other->first_index_);
    diff_index_.Swap(&other->diff_index_);
    x_.Swap(&other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Example::kLdFieldNumber;
const int Example::kTagFieldNumber;
const int Example::kChannelsFieldNumber;
#endif  // !_MSC_VER

Example::Example()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Example::InitAsDefaultInstance() {
  ld_ = const_cast< ::vwcache::LabelData*>(&::vwcache::LabelData::default_instance());
}

Example::Example(const Example& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Example::SharedCtor() {
  _cached_size_ = 0;
  ld_ = NULL;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Example::~Example() {
  SharedDtor();
}

void Example::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
    delete ld_;
  }
}

void Example::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Example::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Example_descriptor_;
}

const Example& Example::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2epb();  return *default_instance_;
}

Example* Example::default_instance_ = NULL;

Example* Example::New() const {
  return new Example;
}

void Example::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ld()) {
      if (ld_ != NULL) ld_->::vwcache::LabelData::Clear();
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Example::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vwcache.LabelData ld = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ld()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }
      
      // optional string tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }
      
      // repeated .vwcache.Channel channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Example::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vwcache.LabelData ld = 1;
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ld(), output);
  }
  
  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag(), output);
  }
  
  // repeated .vwcache.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Example::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .vwcache.LabelData ld = 1;
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ld(), target);
  }
  
  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }
  
  // repeated .vwcache.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channels(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Example::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vwcache.LabelData ld = 1;
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ld());
    }
    
    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
  }
  // repeated .vwcache.Channel channels = 3;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Example::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Example* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Example*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Example::MergeFrom(const Example& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ld()) {
      mutable_ld()->::vwcache::LabelData::MergeFrom(from.ld());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Example::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Example::CopyFrom(const Example& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Example::IsInitialized() const {
  
  return true;
}

void Example::Swap(Example* other) {
  if (other != this) {
    std::swap(ld_, other->ld_);
    std::swap(tag_, other->tag_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Example::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Example_descriptor_;
  metadata.reflection = Example_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vwcache

// @@protoc_insertion_point(global_scope)
