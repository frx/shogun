// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef PROTOBUF_example_2eproto__INCLUDED
#define PROTOBUF_example_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace vwcache {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_example_2eproto();
void protobuf_AssignDesc_example_2eproto();
void protobuf_ShutdownFile_example_2eproto();

class LabelData;
class Channel;
class Example;

// ===================================================================

class LabelData : public ::google::protobuf::Message {
 public:
  LabelData();
  virtual ~LabelData();
  
  LabelData(const LabelData& from);
  
  inline LabelData& operator=(const LabelData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelData& default_instance();
  
  void Swap(LabelData* other);
  
  // implements Message ----------------------------------------------
  
  LabelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelData& from);
  void MergeFrom(const LabelData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline float label() const;
  inline void set_label(float value);
  
  // optional float weight = 2 [default = 1];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight() const;
  inline void set_weight(float value);
  
  // optional float initial = 3 [default = 0];
  inline bool has_initial() const;
  inline void clear_initial();
  static const int kInitialFieldNumber = 3;
  inline float initial() const;
  inline void set_initial(float value);
  
  // @@protoc_insertion_point(class_scope:vwcache.LabelData)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_initial();
  inline void clear_has_initial();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float label_;
  float weight_;
  float initial_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  void InitAsDefaultInstance();
  static LabelData* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message {
 public:
  Channel();
  virtual ~Channel();
  
  Channel(const Channel& from);
  
  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();
  
  void Swap(Channel* other);
  
  // implements Message ----------------------------------------------
  
  Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 namespace_index = 1;
  inline bool has_namespace_index() const;
  inline void clear_namespace_index();
  static const int kNamespaceIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 namespace_index() const;
  inline void set_namespace_index(::google::protobuf::uint32 value);
  
  // repeated int32 diff_index = 2 [packed = true];
  inline int diff_index_size() const;
  inline void clear_diff_index();
  static const int kDiffIndexFieldNumber = 2;
  inline ::google::protobuf::int32 diff_index(int index) const;
  inline void set_diff_index(int index, ::google::protobuf::int32 value);
  inline void add_diff_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      diff_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_diff_index();
  
  // repeated float x = 3 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();
  
  // @@protoc_insertion_point(class_scope:vwcache.Channel)
 private:
  inline void set_has_namespace_index();
  inline void clear_has_namespace_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > diff_index_;
  mutable int _diff_index_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::uint32 namespace_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// -------------------------------------------------------------------

class Example : public ::google::protobuf::Message {
 public:
  Example();
  virtual ~Example();
  
  Example(const Example& from);
  
  inline Example& operator=(const Example& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Example& default_instance();
  
  void Swap(Example* other);
  
  // implements Message ----------------------------------------------
  
  Example* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Example& from);
  void MergeFrom(const Example& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .vwcache.LabelData ld = 1;
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 1;
  inline const ::vwcache::LabelData& ld() const;
  inline ::vwcache::LabelData* mutable_ld();
  inline ::vwcache::LabelData* release_ld();
  
  // optional string tag = 2;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 2;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  
  // repeated .vwcache.Channel channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline const ::vwcache::Channel& channels(int index) const;
  inline ::vwcache::Channel* mutable_channels(int index);
  inline ::vwcache::Channel* add_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::vwcache::Channel >&
      channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::vwcache::Channel >*
      mutable_channels();
  
  // @@protoc_insertion_point(class_scope:vwcache.Example)
 private:
  inline void set_has_ld();
  inline void clear_has_ld();
  inline void set_has_tag();
  inline void clear_has_tag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vwcache::LabelData* ld_;
  ::std::string* tag_;
  ::google::protobuf::RepeatedPtrField< ::vwcache::Channel > channels_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  void InitAsDefaultInstance();
  static Example* default_instance_;
};
// ===================================================================


// ===================================================================

// LabelData

// optional float label = 1;
inline bool LabelData::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelData::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelData::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelData::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline float LabelData::label() const {
  return label_;
}
inline void LabelData::set_label(float value) {
  set_has_label();
  label_ = value;
}

// optional float weight = 2 [default = 1];
inline bool LabelData::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelData::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelData::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelData::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline float LabelData::weight() const {
  return weight_;
}
inline void LabelData::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// optional float initial = 3 [default = 0];
inline bool LabelData::has_initial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelData::set_has_initial() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelData::clear_has_initial() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelData::clear_initial() {
  initial_ = 0;
  clear_has_initial();
}
inline float LabelData::initial() const {
  return initial_;
}
inline void LabelData::set_initial(float value) {
  set_has_initial();
  initial_ = value;
}

// -------------------------------------------------------------------

// Channel

// optional uint32 namespace_index = 1;
inline bool Channel::has_namespace_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel::set_has_namespace_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel::clear_has_namespace_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel::clear_namespace_index() {
  namespace_index_ = 0u;
  clear_has_namespace_index();
}
inline ::google::protobuf::uint32 Channel::namespace_index() const {
  return namespace_index_;
}
inline void Channel::set_namespace_index(::google::protobuf::uint32 value) {
  set_has_namespace_index();
  namespace_index_ = value;
}

// repeated int32 diff_index = 2 [packed = true];
inline int Channel::diff_index_size() const {
  return diff_index_.size();
}
inline void Channel::clear_diff_index() {
  diff_index_.Clear();
}
inline ::google::protobuf::int32 Channel::diff_index(int index) const {
  return diff_index_.Get(index);
}
inline void Channel::set_diff_index(int index, ::google::protobuf::int32 value) {
  diff_index_.Set(index, value);
}
inline void Channel::add_diff_index(::google::protobuf::int32 value) {
  diff_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Channel::diff_index() const {
  return diff_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Channel::mutable_diff_index() {
  return &diff_index_;
}

// repeated float x = 3 [packed = true];
inline int Channel::x_size() const {
  return x_.size();
}
inline void Channel::clear_x() {
  x_.Clear();
}
inline float Channel::x(int index) const {
  return x_.Get(index);
}
inline void Channel::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void Channel::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Channel::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
Channel::mutable_x() {
  return &x_;
}

// -------------------------------------------------------------------

// Example

// optional .vwcache.LabelData ld = 1;
inline bool Example::has_ld() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Example::set_has_ld() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Example::clear_has_ld() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Example::clear_ld() {
  if (ld_ != NULL) ld_->::vwcache::LabelData::Clear();
  clear_has_ld();
}
inline const ::vwcache::LabelData& Example::ld() const {
  return ld_ != NULL ? *ld_ : *default_instance_->ld_;
}
inline ::vwcache::LabelData* Example::mutable_ld() {
  set_has_ld();
  if (ld_ == NULL) ld_ = new ::vwcache::LabelData;
  return ld_;
}
inline ::vwcache::LabelData* Example::release_ld() {
  clear_has_ld();
  ::vwcache::LabelData* temp = ld_;
  ld_ = NULL;
  return temp;
}

// optional string tag = 2;
inline bool Example::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Example::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Example::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Example::clear_tag() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& Example::tag() const {
  return *tag_;
}
inline void Example::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void Example::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void Example::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Example::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* Example::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .vwcache.Channel channels = 3;
inline int Example::channels_size() const {
  return channels_.size();
}
inline void Example::clear_channels() {
  channels_.Clear();
}
inline const ::vwcache::Channel& Example::channels(int index) const {
  return channels_.Get(index);
}
inline ::vwcache::Channel* Example::mutable_channels(int index) {
  return channels_.Mutable(index);
}
inline ::vwcache::Channel* Example::add_channels() {
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vwcache::Channel >&
Example::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::vwcache::Channel >*
Example::mutable_channels() {
  return &channels_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vwcache

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_example_2eproto__INCLUDED
